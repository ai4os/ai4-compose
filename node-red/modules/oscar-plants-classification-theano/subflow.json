{
    "id": "6924aa569048864e",
    "type": "subflow",
    "name": "OSCAR Plants Classification Theano",
    "info": "<main>\r\n    <section>\r\n        <article>\r\n            <h3>About Plant Classification Theano</h3>\r\n            <p>Classify plant images using Tensorflow trained on the iNaturalist dataset, featuring around 4.4M observations and 7M images from 58K worldwide species. For this model, training was focused on the 10K most popular species.</p>\r\n            <ul>\r\n                <li>\r\n                    <a rel=\"stylesheet\" href=\"https://marketplace.deep-hybrid-datacloud.eu/modules/deep-oc-plants-classification-tf.html\">Plant Species Classifier</a>\r\n                </li>\r\n            </ul>\r\n        </article>\r\n        <article>\r\n            <h3>About Plant Classification Service in OSCAR</h3>\r\n            <p>This example uses the pre-trained YOLO version 8 model by DEEP-Hybrid-DataCloud Plant Species Classifier and is prepared to be used with synchronous invocations.</p>\r\n            <p>For more information consult:</p>\r\n            <ul>\r\n                <li>\r\n                    <a rel=\"stylesheet\" href=\"https://github.com/grycap/oscar/tree/master/examples/plant-classification-sync\">Plant Classification Service</a>\r\n                </li>\r\n            </ul>\r\n        </article>\r\n        <article>\r\n            <h3>Inputs</h3>\r\n            <p>The input variables will be the basic variables (OSCAR server URL and credentials). Additionally, the name that has been given to the plant classification service on the server. Inside the input <code>msg.payload</code> must be the image data to classify. With all these elements, the service token is searched and then a request is made to the service (POST /run/{serviceName}).</p>\r\n            <ul>\r\n                <li>\r\n                    <a rel=\"stylesheet\" href=\"https://docs.oscar.grycap.net/api/\">API Documentation</a>\r\n                </li>\r\n            </ul>\r\n        </article>\r\n        <article>\r\n            <h3>Outputs</h3>\r\n            <p>The node returns a JSON object through <code>msg.payload</code> containing the plant classification data for the provided image using YOLO version 8.</p>\r\n        </article>\r\n    </section>\r\n</main>\r\n<footer>\r\n    GRyCAP (Grupo de Grid y Computación de Altas Prestaciones) - UPV\r\n</footer>\r\n",
    "category": "OSCAR",
    "in": [
        {
            "x": 80,
            "y": 220,
            "wires": [
                {
                    "id": "557724ee65469eb2"
                }
            ]
        }
    ],
    "out": [
        {
            "x": 1700,
            "y": 300,
            "wires": [
                {
                    "id": "72e76db504aa7669",
                    "port": 0
                }
            ]
        },
        {
            "x": 1140,
            "y": 380,
            "wires": [
                {
                    "id": "8cec9b05bbd1944e",
                    "port": 0
                }
            ]
        }
    ],
    "env": [
        {
            "name": "Server",
            "type": "str",
            "value": ""
        },
        {
            "name": "Service Name",
            "type": "str",
            "value": ""
        },
        {
            "name": "Token",
            "type": "cred",
            "ui": {
                "type": "input",
                "opts": {
                    "types": [
                        "str",
                        "num",
                        "bool",
                        "json",
                        "bin",
                        "env",
                        "cred"
                    ]
                }
            }
        }
    ],
    "meta": {
        "module": "node-red-contrib-oscar-plants-classification-theano",
        "version": "0.0.1",
        "author": "Diego Alenjandro Aguirre Ramírez <aguirre.dial@gmail.com, dieagra@i3m.upv.es>",
        "desc": "Plants Classification Services at OSCAR",
        "keywords": "node-red, upv, grycap, plant classifier, oscar, AI4EOSC",
        "license": "Apache-2.0"
    },
    "credentials": {
        "Token": ""
    },
    "color": "#3FADB5",
    "icon": "font-awesome/fa-image",
    "status": {
        "x": 1740,
        "y": 160,
        "wires": [
            {
                "id": "f8205582b96b678c",
                "port": 0
            },
            {
                "id": "888c9adad3c2a5a4",
                "port": 0
            }
        ]
    },
    "flow": [
        {},
        {
            "id": "557724ee65469eb2",
            "type": "change",
            "z": "6924aa569048864e",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "server",
                    "pt": "msg",
                    "to": "Server",
                    "tot": "env"
                },
                {
                    "t": "set",
                    "p": "token",
                    "pt": "msg",
                    "to": "Token",
                    "tot": "env"
                },
                {
                    "t": "set",
                    "p": "image",
                    "pt": "msg",
                    "to": "payload",
                    "tot": "msg"
                },
                {
                    "t": "set",
                    "p": "service",
                    "pt": "msg",
                    "to": "Service Name",
                    "tot": "env"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 240,
            "y": 220,
            "wires": [
                [
                    "888c9adad3c2a5a4",
                    "3a0c38de8b65da95"
                ]
            ]
        },
        {
            "id": "888c9adad3c2a5a4",
            "type": "change",
            "z": "6924aa569048864e",
            "name": "Start Service",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "Processing....",
                    "tot": "str"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 430,
            "y": 160,
            "wires": [
                []
            ]
        },
        {
            "id": "72e76db504aa7669",
            "type": "change",
            "z": "6924aa569048864e",
            "name": "Clear Data",
            "rules": [
                {
                    "t": "set",
                    "p": "server",
                    "pt": "msg",
                    "to": "",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "service",
                    "pt": "msg",
                    "to": "",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "token",
                    "pt": "msg",
                    "to": "",
                    "tot": "str"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1350,
            "y": 300,
            "wires": [
                [
                    "f8205582b96b678c"
                ]
            ]
        },
        {
            "id": "f8205582b96b678c",
            "type": "change",
            "z": "6924aa569048864e",
            "name": "End Service",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "Complete!",
                    "tot": "str"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1570,
            "y": 240,
            "wires": [
                []
            ]
        },
        {
            "id": "3a0c38de8b65da95",
            "type": "function",
            "z": "6924aa569048864e",
            "name": "Token Function",
            "func": "var token_plants = msg.token;\n\n\nmsg.headers = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Bearer \" + token_plants\n};\n\nmsg.payload = msg.image;\nmsg.url = msg.server + \"/run/\" + msg.service;\n\nreturn msg;\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 480,
            "y": 240,
            "wires": [
                [
                    "d1c4bf53979788f1"
                ]
            ]
        },
        {
            "id": "d1c4bf53979788f1",
            "type": "base64",
            "z": "6924aa569048864e",
            "name": "Conver to B64",
            "action": "",
            "property": "payload",
            "x": 460,
            "y": 300,
            "wires": [
                [
                    "87f9b8054fbff919"
                ]
            ]
        },
        {
            "id": "8cec9b05bbd1944e",
            "type": "http request",
            "z": "6924aa569048864e",
            "name": "HTTP RQ Fuction",
            "method": "POST",
            "ret": "txt",
            "paytoqs": "ignore",
            "url": "",
            "tls": "",
            "persist": false,
            "proxy": "",
            "insecureHTTPParser": false,
            "authType": "",
            "senderr": false,
            "headers": [],
            "x": 850,
            "y": 300,
            "wires": [
                [
                    "faa841d3e084db08"
                ]
            ]
        },
        {
            "id": "87f9b8054fbff919",
            "type": "function",
            "z": "6924aa569048864e",
            "name": "function 1",
            "func": "// Asignar el contenido actual de msg.payload a la variable algo\nvar algo = msg.payload;\n\n\n\n// Crear el objeto data y asignarlo a msg.payload\nmsg.payload = {\n    'oscar-files': [\n        {\n            'key': 'files',\n            'file_format': 'jpg',\n            'data': algo\n        }\n    ]\n};\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 640,
            "y": 300,
            "wires": [
                [
                    "8cec9b05bbd1944e"
                ]
            ]
        },
        {
            "id": "faa841d3e084db08",
            "type": "function",
            "z": "6924aa569048864e",
            "name": "function 2",
            "func": "const startDelimiter = \"{'status\";\nconst endDelimiter = '[*] Processing';\n\nlet payloadStr = typeof msg.payload == 'string' ? msg.payload : JSON.stringify(msg.payload);\n\nlet startIndex = payloadStr.indexOf(startDelimiter);\nlet endIndex = payloadStr.indexOf(endDelimiter, startIndex) + 1; // Incluye el delimitador de cierre\n\nif (startIndex == -1 || endIndex == -1) {\n    startIndex = -1;\n    endIndex = -1;\n}\n\nmsg.payload = payloadStr.substring(startIndex, endIndex-1);\n\nreturn msg;\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1080,
            "y": 300,
            "wires": [
                [
                    "6ce7b3f103207233"
                ]
            ]
        },
        {
            "id": "6ce7b3f103207233",
            "type": "json",
            "z": "6924aa569048864e",
            "name": "",
            "property": "payload",
            "action": "str",
            "pretty": true,
            "x": 1270,
            "y": 360,
            "wires": [
                [
                    "72e76db504aa7669"
                ]
            ]
        },
        {
            "id": "be4ad2e488a9b206",
            "type": "subflow:6924aa569048864e",
            "z": "d86f675262fbca96",
            "name": "",
            "env": [
                {
                    "name": "Server",
                    "value": "https://inference.cloud.ai4eosc.eu",
                    "type": "str"
                },
                {
                    "name": "Service Name",
                    "value": "plant-classification-yolov8",
                    "type": "str"
                },
                {
                    "name": "Token",
                    "type": "cred"
                }
            ],
            "x": 770,
            "y": 180,
            "wires": [
                [
                    "91d45c681ffedd1a"
                ],
                []
            ]
        }
    ]
}